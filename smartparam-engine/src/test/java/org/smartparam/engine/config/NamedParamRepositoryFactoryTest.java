/*
 * Copyright 2014 Adam Dubiel, Przemek Hertel.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.smartparam.engine.config;

import org.smartparam.engine.core.parameter.NamedParamRepository;
import org.smartparam.engine.core.parameter.ParamRepository;
import org.smartparam.engine.core.repository.RepositoryName;
import org.testng.annotations.Test;
import static org.mockito.Mockito.*;
import static org.smartparam.engine.test.ParamEngineAssertions.assertThat;

/**
 *
 * @author Adam Dubiel
 */
public class NamedParamRepositoryFactoryTest {

    @Test
    public void shouldReturnNamedParamRepositoryProducedFromRepositoryNameAndRepository() {
        // given
        ParamRepository repository = mock(ParamRepository.class);
        NamedParamRepositoryFactory factory = new NamedParamRepositoryFactory();

        // when
        NamedParamRepository namedRepository = factory.create(RepositoryName.from("test"), repository);

        // then
        assertThat(namedRepository).containsRepository(repository).hasName("test");
    }

    @Test
    public void shouldReturnNamedParamRepositoryProducedFromStringAsNameAndRepository() {
        // given
        ParamRepository repository = mock(ParamRepository.class);
        NamedParamRepositoryFactory factory = new NamedParamRepositoryFactory();

        // when
        NamedParamRepository namedRepository = factory.create("test", repository);

        // then
        assertThat(namedRepository).containsRepository(repository).hasName("test");
    }

    @Test
    public void shouldAutoGenerateRepositoryNameFromClassSimpleNameWhenNoneSpecified() {
        // given
        ParamRepository repository = mock(ParamRepository.class);
        String repositoryClassName = repository.getClass().getSimpleName();
        NamedParamRepositoryFactory factory = new NamedParamRepositoryFactory();

        // when
        NamedParamRepository namedRepository = factory.create(repository);

        // then
        assertThat(namedRepository).hasName(repositoryClassName);
    }

    @Test
    public void shouldAddOccurrenceNumberToAutoGeneratedNameWhenMultipleRepositoriesWithSameClassProvided() {
        // given
        ParamRepository repository = mock(ParamRepository.class);
        String repositoryClassName = repository.getClass().getSimpleName();
        NamedParamRepositoryFactory factory = new NamedParamRepositoryFactory();

        factory.create(repository);

        // when
        NamedParamRepository namedRepository1 = factory.create(repository);
        NamedParamRepository namedRepository2 = factory.create(repository);

        // then
        assertThat(namedRepository1).hasName(repositoryClassName + "1");
        assertThat(namedRepository2).hasName(repositoryClassName + "2");
    }
}
